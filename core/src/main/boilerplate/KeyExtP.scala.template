package laserdisc
package protocol

trait KeyExtP { this: KeyBaseP =>
  import keytypes._

  //DEL
  [#final def del([#key1: Key#]): Protocol.Aux[NonNegInt] =
    del(OneOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil))#
  ]

  //EXISTS
  [#final def exists([#key1: Key#]): Protocol.Aux[Option[PosInt]] =
    exists(OneOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil))#
  ]

  //MIGRATE
  [2..18#final def migrate([#key1: Key#], host: Host, port: Port, dbIndex: DbIndex, timeout: NonNegInt): Protocol.Aux[NOKEY | OK] =
    migrate(TwoOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil), host, port, dbIndex, timeout)#
  ]
  [2..17#final def migrate([#key1: Key#], host: Host, port: Port, dbIndex: DbIndex, timeout: NonNegInt, mode: KeyMigrateMode): Protocol.Aux[NOKEY | OK] =
    migrate(TwoOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil), host, port, dbIndex, timeout, mode)#
  ]

  //TOUCH
  [#final def touch([#key1: Key#]): Protocol.Aux[NonNegInt] =
    touch(OneOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil))#
  ]

  //UNLINK
  [#final def unlink([#key1: Key#]): Protocol.Aux[NonNegInt] =
    unlink(OneOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil))#
  ]
}