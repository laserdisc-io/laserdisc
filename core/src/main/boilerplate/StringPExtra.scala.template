package laserdisc
package protocol

trait StringPExtra { this: StringP =>
  import StringP.Bitwise
  import Read.==>
  import shapeless._

  //BITOP
  [..19#final def bitop(key##1: Key, bitwise: Bitwise, [#key2: Key#], destinationKey: Key): Protocol.Aux[NonNegInt] =
    bitop(bitwise, TwoOrMoreKeys.unsafeFrom(key##1 :: [#key2# :: ] :: Nil), destinationKey)#
  ]

  //MGET
  [#final def mget[A]([#key1: Key#])(
      implicit ev: NonNilArray ==> A
  ): Protocol.Aux[A] =
    mget[A](OneOrMoreKeys.unsafeFrom([#key1# :: ] :: Nil))#
  ]

  //MSET
  [#final def mset[[#A1 <: XString, B1: Show#]]([#key1: SingletonKey[A1], value1: B1#]): Protocol.Aux["OK"] = {
    [#val tagged1 = tag[A1](Symbol(key1.value))#
    ]
    mset([#labelled.field[tagged1.type](value1)# :: ] :: HNil)
  }#
  ]

  //MSETNX
  [#final def msetnx[[#A1 <: XString, B1: Show#]]([#key1: SingletonKey[A1], value1: B1#]): Protocol.Aux[Boolean] = {
    [#val tagged1 = tag[A1](Symbol(key1.value))#
    ]
    msetnx([#labelled.field[tagged1.type](value1)# :: ] :: HNil)
  }#
  ]
}