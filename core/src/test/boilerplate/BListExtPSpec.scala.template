package laserdisc
package protocol

import org.scalacheck.Prop.forAll

final class BListExtPSpec extends BListPSpec {
  test("The Blocking List extended protocol using blpop fails to compile given key but missing read instance") {
    assertNoDiff(
      compileErrors("""blpop[Bar](Key("a"))"""),
      """|error:
         |Implicit not found Read[laserdisc.protocol.Bulk, laserdisc.Bar].
         |
         |Try writing your own, for example:
         |
         |implicit final val myRead: Read[laserdisc.protocol.Bulk, laserdisc.Bar] = new Read[laserdisc.protocol.Bulk, laserdisc.Bar] {
         |  override final def read(a: laserdisc.protocol.Bulk): Option[laserdisc.Bar] = ???
         |}
         |
         |Note 1: you can use the factory method Read.instance instead of creating it manually as shown above
         |Note 2: make sure to inspect the combinators as you may be able to leverage some other Read instance
         |
         |blpop[Bar](Key("a"))
         |          ^
         |""".stripMargin
    )
  }
  test("The Blocking List extended protocol using blpop fails to compile given key and timeout but missing read instance") {
    assertNoDiff(
      compileErrors("""blpop[Bar](Key("a"), PosInt(1))"""),
      """|error:
         |Implicit not found Read[laserdisc.protocol.Bulk, laserdisc.Bar].
         |
         |Try writing your own, for example:
         |
         |implicit final val myRead: Read[laserdisc.protocol.Bulk, laserdisc.Bar] = new Read[laserdisc.protocol.Bulk, laserdisc.Bar] {
         |  override final def read(a: laserdisc.protocol.Bulk): Option[laserdisc.Bar] = ???
         |}
         |
         |Note 1: you can use the factory method Read.instance instead of creating it manually as shown above
         |Note 2: make sure to inspect the combinators as you may be able to leverage some other Read instance
         |
         |blpop[Bar](Key("a"), PosInt(1))
         |          ^
         |""".stripMargin
    )
  }
  //BLPOP with no timeout specified
  [1..5#property("The Blocking List extended protocol using blpop roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], i: Int) =>
      val protocol = blpop[Int]([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("BLPOP"), [#Bulk(k1)#], Bulk(##0)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, i))
    }
  }#
  ]
  //BLPOP with no timeout specified and specific read instance
  [1..5#property("The Blocking List extended protocol using blpop roundtrips successfully given [#key1#] and specific read instance") {
    forAll { ([#k1: Key#], i: Int) =>
      val protocol = blpop[Foo]([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("BLPOP"), [#Bulk(k1)#], Bulk(##0)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, Foo(i)))
    }
  }#
  ]
  //BLPOP with timeout specified
  [1..5#property("The Blocking List extended protocol using blpop roundtrips successfully given [#key1#] and positive timeout") {
    forAll { ([#k1: Key#], pi: PosInt, i: Int) =>
      val protocol = blpop[Int]([#k1#], pi)
      assertEquals(protocol.encode, Arr(Bulk("BLPOP"), [#Bulk(k1)#], Bulk(pi)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, i))
    }
  }#
  ]
  //BLPOP with timeout specified and specific read instance
  [1..5#property("The Blocking List extended protocol using blpop roundtrips successfully given [#key1#], positive timeout and specific read instance") {
    forAll { ([#k1: Key#], pi: PosInt, i: Int) =>
      val protocol = blpop[Foo]([#k1#], pi)
      assertEquals(protocol.encode, Arr(Bulk("BLPOP"), [#Bulk(k1)#], Bulk(pi)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, Foo(i)))
    }
  }#
  ]
  test("The Blocking List extended protocol using brpop fails to compile given key but missing read instance") {
    assertNoDiff(
      compileErrors("""brpop[Bar](Key("a"))"""),
      """|error:
         |Implicit not found Read[laserdisc.protocol.Bulk, laserdisc.Bar].
         |
         |Try writing your own, for example:
         |
         |implicit final val myRead: Read[laserdisc.protocol.Bulk, laserdisc.Bar] = new Read[laserdisc.protocol.Bulk, laserdisc.Bar] {
         |  override final def read(a: laserdisc.protocol.Bulk): Option[laserdisc.Bar] = ???
         |}
         |
         |Note 1: you can use the factory method Read.instance instead of creating it manually as shown above
         |Note 2: make sure to inspect the combinators as you may be able to leverage some other Read instance
         |
         |brpop[Bar](Key("a"))
         |          ^
         |""".stripMargin
    )
  }
  test("The Blocking List extended protocol using brpop fails to compile given key and timeout but missing read instance") {
    assertNoDiff(
      compileErrors("""brpop[Bar](Key("a"), PosInt(1))"""),
      """|error:
         |Implicit not found Read[laserdisc.protocol.Bulk, laserdisc.Bar].
         |
         |Try writing your own, for example:
         |
         |implicit final val myRead: Read[laserdisc.protocol.Bulk, laserdisc.Bar] = new Read[laserdisc.protocol.Bulk, laserdisc.Bar] {
         |  override final def read(a: laserdisc.protocol.Bulk): Option[laserdisc.Bar] = ???
         |}
         |
         |Note 1: you can use the factory method Read.instance instead of creating it manually as shown above
         |Note 2: make sure to inspect the combinators as you may be able to leverage some other Read instance
         |
         |brpop[Bar](Key("a"), PosInt(1))
         |          ^
         |""".stripMargin
    )
  }
  //BRPOP with no timeout specified
  [1..5#property("The Blocking List extended protocol using brpop roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], i: Int) =>
      val protocol = brpop[Int]([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("BRPOP"), [#Bulk(k1)#], Bulk(##0)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, i))
    }
  }#
  ]
  //BRPOP with no timeout specified and specific read instance
  [1..5#property("The Blocking List extended protocol using brpop roundtrips successfully given [#key1#] and specific read instance") {
    forAll { ([#k1: Key#], i: Int) =>
      val protocol = brpop[Foo]([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("BRPOP"), [#Bulk(k1)#], Bulk(##0)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, Foo(i)))
    }
  }#
  ]
  //BRPOP with timeout specified
  [1..5#property("The Blocking List extended protocol using brpop roundtrips successfully given [#key1#] and positive timeout") {
    forAll { ([#k1: Key#], pi: PosInt, i: Int) =>
      val protocol = brpop[Int]([#k1#], pi)
      assertEquals(protocol.encode, Arr(Bulk("BRPOP"), [#Bulk(k1)#], Bulk(pi)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, i))
    }
  }#
  ]
  //BRPOP with timeout specified and specific read instance
  [1..5#property("The Blocking List extended protocol using brpop roundtrips successfully given [#key1#], positive timeout and specific read instance") {
    forAll { ([#k1: Key#], pi: PosInt, i: Int) =>
      val protocol = brpop[Foo]([#k1#], pi)
      assertEquals(protocol.encode, Arr(Bulk("BRPOP"), [#Bulk(k1)#], Bulk(pi)))
      protocol.decode(Arr(Bulk(k##1), Bulk(i))) onRight (_ contains KV(k##1, Foo(i)))
    }
  }#
  ]
}
