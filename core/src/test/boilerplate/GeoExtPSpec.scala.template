package laserdisc
package protocol

import org.scalacheck.Prop.forAll

final class GeoExtPSpec extends GeoPSpec {
  import geotypes._

  [1..5#property("The Geo extended protocol using geoadd roundtrips successfully given key and [#position1#]") {
    forAll { (k: Key, [#p1: GeoPosition#], nni: NonNegInt) =>
      val protocol = geoadd(k, [#p1#])
      assertEquals(protocol.encode, Arr(Bulk("GEOADD") :: Bulk(k) :: List([#p1#]).flatMap(geoPositionToBulkList)))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
  [1..5#property("The Geo extended protocol using geohash roundtrips successfully given key and [#member1#]") {
    forAll { (k: Key, [#m1: Key#], oghs: OneOrMore[Option[GeoHash]]) =>
      val protocol = geohash(k, [#m1#])
      assertEquals(protocol.encode, Arr(Bulk("GEOHASH") :: Bulk(k) :: List([#Bulk(m1)#])))
      assertEquals(protocol.decode(oneOrMoreGeoHashOptionToArr(oghs)), oghs.value)
    }
  }#
  ]
  [1..5#property("The Geo extended protocol using geopos roundtrips successfully given key and [#member1#]") {
    forAll { (k: Key, [#m1: Key#], ocs: OneOrMore[Option[GeoCoordinates]]) =>
      val protocol = geopos(k, [#m1#])
      assertEquals(protocol.encode, Arr(Bulk("GEOPOS") :: Bulk(k) :: List([#Bulk(m1)#])))
      assertEquals(protocol.decode(oneOrMoreGeoCoordinatesOptionToArr(ocs)), ocs.value)
    }
  }#
  ]
}
