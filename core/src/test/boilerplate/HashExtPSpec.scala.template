package laserdisc
package protocol

import org.scalacheck.Prop.forAll

final class HashExtPSpec extends HashPSpec {
  [1..5#property("The Hash extended protocol using hdel roundtrips successfully given key and [#field1#]") {
    forAll { (k: Key, [#f1: Key#], nni: NonNegInt) =>
      val protocol = hdel(k, [#f1#])
      assertEquals(protocol.encode, Arr(Bulk("HDEL"), Bulk(k), [#Bulk(f1)#]))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
  [1..5#property("The Hash extended protocol using hmget roundtrips successfully given key and [#field1#]") {
    forAll { (k: Key, [#f1: Key#]) =>
      forAll { ([#v1: Int#]) =>
        val protocol = hmget[[#Int#]](k, [#f1#])
        assertEquals(protocol.encode, Arr(Bulk("HMGET"), Bulk(k), [#Bulk(f1)#]))
        assertEquals(protocol.decode(Arr([#Bulk(v1)#])), (([#v1#])))
      }
    }
  }#
  ]
  [1..5#property("The Hash extended protocol using hmset roundtrips successfully given key and [#field1#]") {
    forAll { (k: Key, [#f1: Key#]) =>
      forAll { ([#v1: Int#]) =>
        val protocol = hmset(k, [#f1, v1#])
        assertEquals(protocol.encode, Arr(Bulk("HMSET"), Bulk(k), [#Bulk(f1), Bulk(v1)#]))
        assertEquals(protocol.decode(Str(OK.value)), OK)
      }
    }
  }#
  ]
}
