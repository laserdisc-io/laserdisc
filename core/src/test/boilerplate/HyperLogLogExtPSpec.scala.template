package laserdisc
package protocol

import org.scalacheck.Prop.forAll

final class HyperLogLogExtPSpec extends HyperLogLogPSpec {
  [1..5#property("The HyperLogLog extended protocol using pfadd roundtrips successfully given key and [#element1#]") {
    forAll { (k: Key, [#e1: Key#], b: Boolean) =>
      val protocol = pfadd(k, [#e1#])
      assertEquals(protocol.encode, Arr(Bulk("PFADD"), Bulk(k), [#Bulk(e1)#]))
      assertEquals(protocol.decode(boolToNum(b)), b)
    }
  }#
  ]
  [1..5#property("The HyperLogLog extended protocol using pfcount roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], nni: NonNegInt) =>
      val protocol = pfcount([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("PFCOUNT"), [#Bulk(k1)#]))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
  [2..5#property("The HyperLogLog extended protocol using pfmerge roundtrips successfully given [#sourcekey1#] and destinationkey") {
    forAll { ([#sk1: Key#], dk: Key) =>
      val protocol = pfmerge([#sk1#], dk)
      assertEquals(protocol.encode, Arr(Bulk("PFMERGE"), Bulk(dk), [#Bulk(sk1)#]))
      assertEquals(protocol.decode(Str(OK.value)), OK)
    }
  }#
  ]
}
