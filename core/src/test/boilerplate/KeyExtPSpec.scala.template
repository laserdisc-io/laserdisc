package laserdisc
package protocol

import org.scalacheck.Prop.forAll

final class KeyExtPSpec extends KeyPSpec {
  import keytypes._

  [1..5#property("The Key extended protocol using del roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], nni: NonNegInt) =>
      val protocol = del([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("DEL"), [#Bulk(k1)#]))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
  [1..5#property("The Key extended protocol using exists roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], opi: Option[PosInt]) =>
      val protocol = exists([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("EXISTS"), [#Bulk(k1)#]))
      assertEquals(protocol.decode(Num(opi.fold(##0L)(_.value.toLong))), opi)
    }
  }#
  ]
  [2..6#property("The Key extended protocol using migrate roundtrips successfully given [#key1#], host, port, db index and timeout") {
    forAll { (keys: ([#Key#]), input: (Host, Port, DbIndex, NonNegInt, NOKEY | OK)) =>
      val ([#k1#]) = keys
      val (h, p, dbi, nni, nkOrOk) = input
      val protocol = migrate([#k1#], h, p, dbi, nni)
      assertEquals(protocol.encode, Arr(
        Bulk("MIGRATE") :: Bulk(h) :: Bulk(p) :: Bulk("") :: Bulk(dbi) :: Bulk(nni) :: Bulk("KEYS") :: [#Bulk(k1)# ::] :: Nil
      ))
      assertEquals(protocol.decode(noKeyOrOkToStr(nkOrOk)), nkOrOk)
    }
  }#
  ]
  [2..6#property("The Key extended protocol using migrate roundtrips successfully given [#key1#], host, port, db index, timeout and migrate mode") {
    forAll { (keys: ([#Key#]), input: (Host, Port, DbIndex, NonNegInt, KeyMigrateMode, NOKEY | OK)) =>
      val ([#k1#]) = keys
      val (h, p, dbi, nni, mm, nkOrOk) = input
      val protocol = migrate([#k1#], h, p, dbi, nni, mm)
      assertEquals(protocol.encode, Arr(
        Bulk("MIGRATE") :: Bulk(h) :: Bulk(p) :: Bulk("") :: Bulk(dbi) :: Bulk(nni) :: mm.params.map(Bulk(_)) ::: (Bulk("KEYS") :: [#Bulk(k1)# ::] :: Nil)
      ))
      assertEquals(protocol.decode(noKeyOrOkToStr(nkOrOk)), nkOrOk)
    }
  }#
  ]
  [1..5#property("The Key extended protocol using touch roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], nni: NonNegInt) =>
      val protocol = touch([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("TOUCH"), [#Bulk(k1)#]))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
  [1..5#property("The Key extended protocol using unlink roundtrips successfully given [#key1#]") {
    forAll { ([#k1: Key#], nni: NonNegInt) =>
      val protocol = unlink([#k1#])
      assertEquals(protocol.encode, Arr(Bulk("UNLINK"), [#Bulk(k1)#]))
      assertEquals(protocol.decode(Num(nni.value.toLong)), nni)
    }
  }#
  ]
}
